@using Microsoft.AspNetCore.Mvc.Localization
@using Microsoft.AspNetCore.Authorization
@*@model IEnumerable<UserIndexViewModel>*@
@inject IAuthorizationService AuthorizationService
@inject IViewLocalizer Localizer

@{
  ViewData["Title"] = Localizer["Users"];
}
<script type="text/javascript" src="~/lib/knockout/dist/knockout.js"></script>
<style>
  .button-footer
  {
    position: fixed;
    right: 20px;
    bottom: 0;
    /*bottom: 100px;*/
    padding: 1rem;
    background-color: transparent;
    text-align: center;
  }

  .mdl-list__item
  {
    border-collapse: collapse;
    border-bottom: 1px solid rgba(0, 0, 0, 0.12);
    background-color: rgb(255,255,255);
    white-space: nowrap;
    height: 60px;
  }

    .mdl-list__item:first-child
    {
      border-top: 1px solid rgba(0, 0, 0, 0.12);
    }

    .mdl-list__item > button
    {
      display: none;
    }

    .mdl-list__item:hover > button
    {
      display: block;
    }
</style>

@section scripts
{
  <script>
    var uri = 'api/users';
    $(document).ready(function ()
    {
      var uri = 'api/users';
      $.ajax(
      {
        url: uri,
        type: 'GET',
        contentType: "application/json;charset=utf-8",
        success: function (data)
        {
          data.forEach(addUser);
          ko.applyBindings(new ViewModel, document.getElementById('userlist'));
        },
        error: function (data)
        {
        }
      });

      function ViewModel()
      {
        var self = this;
        self.userResult = ko.observableArray(users);

        self.refresh = function ()
        {
          self.userResult(users);
        };

        self.add = function (id, mail, name)
        {
          self.userResult().push(new User(id, mail, name))
          self.refresh()
        }

        self.removeUser = function (id)
        {
          self.userResult.remove(function (user)
          {
            return user.id() == id;
          });
        }

        self.sortUsers = function ()
        {
          self.userResult.sort(function (user1, user2)
          {
            return user1.name().localeCompare(user2.name()) || user1.name().localeCompare(user2.name());
          });
        };
      };

      function CreateUserViewModel()
      {
        var self = this;
        self.name = ko.observable("").extend({ required: "Please enter the name" });
        self.email = ko.observable("").extend({ required: "Please enter the email" });
        self.username = ko.observable("").extend({ required: "Please enter the username" });
        self.roles = ko.observableArray([]);

        //self.refresh = function ()
        //{
        //  var data = self.roles().slice(0);
        //  self.roles([]);
        //  self.roles(data);
        //};

        self.reset = function ()
        {
          $('#divname').removeClass('is-dirty');
          $('#divemail').removeClass('is-dirty');
          $('#divusername').removeClass('is-dirty');

          self.name("");
          self.email("");
          self.username("");
        };

        self.loadRoles = function (data)
        {
          createUserRoles = [];
          data.forEach(createRoles)
          self.roles(createUserRoles);
        }
      }

      ko.applyBindings(new CreateUserViewModel(), document.getElementById('createuserdialog'))
    });
  </script>
}
<div class="mdl-grid">
  <div class="mdl-cell mdl-cell--2-col"></div>
  <div class="mdl-cell mdl-cell--9-col">
    <dialog class="mdl-dialog">
      <div id="createuserdialog" class="mdl-dialog__content">
        <div align="center">
          <div class="mdl-textfield mdl-js-textfield" id="divname">
            <input data-bind='textInput:name, valueUpdate: "afterkeydown"' class="mdl-textfield__input" type="text" id="name" />
            <label class="mdl-textfield__label" for="name">@Localizer["Name"]</label>
            <span data-bind='visible: name.hasError(), text: name.validationMessage' class="text-danger" />
          </div>

        </div>
        <div align="center">
          <div class="mdl-textfield mdl-js-textfield" id="divusername">
            <input data-bind='textInput:username, valueUpdate: "afterkeydown"' class="mdl-textfield__input" type="text" id="username" />
            <label class="mdl-textfield__label" for="name">@Localizer["Username"]</label>
            <span data-bind='visible: username.hasError(), text: username.validationMessage' class="text-danger" />
          </div>
        </div>
        <div align="center">
          <div class="mdl-textfield mdl-js-textfield" id="divemail">
            <label class="mdl-textfield__label" for="name">@Localizer["Email"]</label>
            <div>
              <input data-bind='textInput:email, valueUpdate: "afterkeydown"' class="mdl-textfield__input" type="text" id="email" />
              <span data-bind='visible: email.hasError(), text: email.validationMessage' class="text-danger" />
            </div>
          </div>
        </div>
        <ul class="mdl-list" data-bind="foreach: roles">
          <li class="mdl-list__item">
            <label data-bind="checkbox: check(), attr: {'for': id(), id: 'lbl'+ id() }" class="mdl-checkbox mdl-js-checkbox mdl-js-ripple-effect">
              <input class="mdl-checkbox__input" type="checkbox" data-bind='checked: check, attr: {id: id()}' />
              <span class="mdl-checkbox__label">
                <span class="mdl-list__item-secondary-action" data-bind='text:name()'></span>
              </span>
            </label>
          </li>
        </ul>
      </div>
      <div class="mdl-dialog__actions">
        <button type="button" onclick="Create()" class="mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--accent">Create</button>
        <button type="button" class="mdl-button mdl-js-button mdl-button--raised mdl-button--colored mdl-button close">Cancel</button>
      </div>
    </dialog>

    <h4>@Localizer["Users"]</h4>
    <ul id="userlist" class="mdl-list" data-bind="foreach: userResult">
      <li data-bind="attr: {id: 'itemList-' + id() }" class="mdl-list__item mdl-list__item--two-line js-deletable mdl-shadow--4dp ">
        <span class="mdl-list__item-primary-content">
          <i class="material-icons mdl-list__item-avatar">person</i>
          <span data-bind="text:name"></span>
          <span class="mdl-list__item-sub-title" data-bind="text:email"></span>
        </span>
        @if (await AuthorizationService.AuthorizeAsync(User, "Update Users"))
        {
          <button data-bind="attr: {id: 'edit-' + id() }, click: redirect" class="mdl-button mdl-js-button mdl-button--icon">
            <i class="material-icons">mode_edit</i>
          </button>
          <span class="mdl-tooltip" data-bind="attr: {'data-mdl-for': 'edit-' + id() }">
            @Localizer["Edit"]
          </span>
        }
        @if (await AuthorizationService.AuthorizeAsync(User, "Delete Users"))
        {
          <button data-bind="attr: {id: 'delete-' + id() }, click: remove" class="mdl-button mdl-js-button mdl-button--icon">
            <i class="material-icons">delete</i>
          </button>
          <span class="mdl-tooltip" data-bind="attr: {'data-mdl-for': 'delete-' + id() }">
            @Localizer["Delete"]
          </span>
        }
      </li>
    </ul>
  </div>

  <div class="button-footer">
    @if (await AuthorizationService.AuthorizeAsync(User, "Create Users"))
    {
      <button id="show-dialog" class="mdl-button mdl-js-button mdl-button--fab mdl-button--colored">
        <i class="material-icons">add</i>
      </button>
      <div class="mdl-tooltip" data-mdl-for="add">
        @Localizer["Add"]
      </div>
    }
  </div>
</div>

<script type="text/javascript">
  var users = [];
  var createUserRoles = [];
  var createUser;
  function addUser(item, index)
  {
    users.push(new User(item.id, item.email, item.name));
  }
  function User(id, email, name)
  {
    var self = this;
    self.id = ko.observable(id);
    self.name = ko.observable(name);
    self.email = ko.observable(email);
    self.redirect = function ()
    {
      window.location.href = "User/Edit/" + self.id();
    }
    self.remove = function ()
    {
      deleteUser(self.id());
    }
  }

  var dialog = document.querySelector('dialog');
  var showDialogButton = document.querySelector('#show-dialog');
  if (!dialog.showModal)
  {
    dialogPolyfill.registerDialog(dialog);
  }

  showDialogButton.addEventListener('click', function ()
  {
    var usersUrl = 'api/users/create';
    $.ajax(
      {
        url: usersUrl,
        type: 'GET',
        contentType: "application/json;charset=utf-8",
        success: function (data)
        {
          // loadRoles
          ko.contextFor(document.getElementById("createuserdialog")).$data.reset();
          ko.contextFor(document.getElementById("createuserdialog")).$data.loadRoles(data)

          dialog.showModal();
          dialog.style.width = "400px";
        },
        error: function (data)
        {
        }
      });
  });

  dialog.querySelector('.close').addEventListener('click', function ()
  {
    dialog.close();
  });

  function deleteUser(id)
  {
    var usersUrl = 'api/users';
    const url = `${usersUrl}/${id}`;

    $.ajax({
      url: url,
      type: 'DELETE',
      contentType: "application/json;charset=utf-8",
      success: function (data)
      {
        ko.contextFor(document.getElementById("userlist")).$data.removeUser(id)
        message(data)
      },
      error: function (data)
      {
        message("Error while deleting user")
      }
    });
  }

  ko.extenders.required = function (target, overrideMessage)
  {
    //add some sub-observables to our observable
    target.hasError = ko.observable();
    target.validationMessage = ko.observable();

    //define a function to do validation
    function validate(newValue)
    {
      target.hasError(newValue ? false : true);
      target.validationMessage(newValue ? "" : overrideMessage || "This field is required");
    }

    //initial validation
    validate(target());

    //validate whenever the value changes
    target.subscribe(validate);

    //return the original observable
    return target;
  };

  function Create()
  {
    // validations.
    var uri = 'api/users/create';
    var obj = new Object();
    obj.name = document.getElementById('name').value;
    obj.username = document.getElementById('username').value;
    obj.email = document.getElementById('email').value;
    obj.roles = createUserRoles;
    var model = JSON.stringify(obj);

    $.ajax(
    {
      type: 'POST',
      url: uri,
      contentType: "application/json; charset=utf-8",
      dataType: "json",
      data: model,
      success: function (data)
      {
        // after invoking webapi and if success, return json and push it to users.
        addUser(data, 0);
        ko.contextFor(document.getElementById("userlist")).$data.refresh();
        ko.contextFor(document.getElementById("userlist")).$data.sortUsers();
        message("User created.");
        var dialog = document.querySelector('dialog');
        dialog.close();
      },
      error: function (data)
      {
      }
    });
  }

  function createRoles(item, index)
  {
    createUserRoles.push(new Role(item))
  }

  function Role(item)
  {
    var self = this;
    self.id = ko.observable(item.id)
    self.name = ko.observable(item.name)
    self.check = ko.observable(item.check || false)
  }

  function message(message)
  {
    var notification = document.querySelector('#snackbar');
    notification.MaterialSnackbar.showSnackbar(
    {
      message: message
    });
  }

  ko.bindingHandlers.checkbox =
    {
      init: function (element, valueAccessor, allBindings, viewModel, bindingContext)
      {
        var $el = $(element);
        var selected = valueAccessor();
        if (selected)
        {
          $el.addClass('is-checked')
        }
        else
        {
          $el.removeClass('is-checked')
        }

        componentHandler.upgradeAllRegistered();
      },
      update: function (element, valueAccessor, allBindings, viewModel, bindingContext)
      {
        var $el = $(element);
        var selected = valueAccessor();
        if (selected)
        {
          $el.addClass('is-checked')
        }
        else
        {
          $el.removeClass('is-checked')
        }

        // componentHandler.upgradeAllRegistered();
      }

    };
</script>