@using Microsoft.AspNetCore.Mvc.Localization
@using Microsoft.AspNetCore.Authorization
@model IEnumerable<UserIndexViewModel>
@inject IAuthorizationService AuthorizationService
@inject IViewLocalizer Localizer

@{
  ViewData["Title"] = Localizer["Users"];
}
<script type="text/javascript" src="~/lib/knockout/dist/knockout.js"></script>
<style>
  .button-footer
  {
    position: fixed;
    right: 20px;
    bottom: 0;
    /*bottom: 100px;*/
    padding: 1rem;
    background-color: #FFFFFF;
    text-align: center;
  }

  .mdl-list__item
  {
    border-collapse: collapse;
    border-bottom: 1px solid rgba(0, 0, 0, 0.12);
    background-color: rgb(255,255,255);
    white-space: nowrap;
    height: 60px;
  }

    .mdl-list__item:first-child
    {
      border-top: 1px solid rgba(0, 0, 0, 0.12);
    }

    .mdl-list__item > button
    {
      display: none;
    }

    .mdl-list__item:hover > button
    {
      display: block;
    }
</style>

@section scripts
{
  <script>
    var uri = 'api/users';
    $(document).ready(function ()
    {
      var uri = 'api/users';
      // Send an AJAX request
      $.ajax(
      {
        url: uri,
        type: 'GET',
        contentType: "application/json;charset=utf-8",
        success: function (data)
        {
          data.forEach(addUser);

          ko.applyBindings(new ViewModel, document.getElementById('userlist'));
        },
        error: function (data)
        {
        }
      });

      function ViewModel()
      {
        var self = this;
        self.userResult = ko.observableArray(users);

        self.refresh = function ()
        {
          var data = self.userResult().slice(0);
          self.userResult([]);
          self.userResult(data);
        };

        self.add = function (id, mail, name)
        {
          self.userResult().push(new User(id, mail, name))
          self.refresh()
        }
      };
    });
  </script>
}

<div class="mdl-grid">
  <div class="mdl-cell mdl-cell--2-col"></div>
  <div class="mdl-cell mdl-cell--9-col">

    <dialog class="mdl-dialog">
      <div id="createuserdialog" class="mdl-dialog__content">
        <div align="center">
          <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label">
            @*name field*@
            <label class="mdl-textfield__label" for="name">@Localizer["Name"]</label>
            <div>
              <input class="mdl-textfield__input" type="text" id="name" data-bind="value:name()" />
              <span class="text-danger" />
            </div>
          </div>
        </div>
        <div align="center">
          <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label">
            @*name field*@
            <label class="mdl-textfield__label" for="name">@Localizer["Username"]</label>
            <div>
              <input class="mdl-textfield__input" type="text" id="username" data-bind="value:username()" />
              <span class="text-danger" />
            </div>
          </div>
        </div>
        <div align="center">
          <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label">
            @*name field*@
            <label class="mdl-textfield__label" for="name">@Localizer["Email"]</label>
            <div>
              <input class="mdl-textfield__input" type="text" id="email" data-bind="value:email()" />
              <span class="text-danger" />
            </div>
          </div>
        </div>

        @*list with the roles to add to the new user.*@
        <ul class="demo-list-two mdl-list" data-bind="foreach: roles">
          <li class="mdl-list__item">

            <span class="mdl-list__item-primary-content">
              <label data-bind="attr: {'for': 'role' + id() }" class="mdl-checkbox mdl-js-checkbox mdl-js-ripple-effect">
                <input type="checkbox" data-bind="checked: check(), click: seleccionar(id()), attr: {id: 'role' + id()}" class="mdl-checkbox__input" checked />
              </label>
            </span>

            <span class="mdl-list__item-secondary-action">
              <span data-bind="text:name()"></span>
            </span>

          </li>
        </ul>
      </div>
      <div class="mdl-dialog__actions">
        <button type="button" class="mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--accent">Create</button>
        <button type="button" class="mdl-button mdl-js-button mdl-button--raised mdl-button--colored mdl-button close">Cancel</button>
      </div>
    </dialog>

    <h4>@Localizer["Users"]</h4>

    <ul id="userlist" class="index-list" data-bind="foreach: userResult">
      <li data-bind="attr: {id: 'itemList-' + id() }" class="mdl-list__item mdl-list__item--two-line js-deletable mdl-shadow--4dp ">

        <span class="mdl-list__item-primary-content">
          <i class="material-icons mdl-list__item-avatar">person</i>
          <span data-bind="text:name"></span>
          <span class="mdl-list__item-sub-title" data-bind="text:email"></span>
        </span>

        @if (await AuthorizationService.AuthorizeAsync(User, "Update Users"))
        {
          <button data-bind="attr: {id: 'edit-' + id() }, click: redirect" class="mdl-button mdl-js-button mdl-button--icon">
            <i class="material-icons">mode_edit</i>
          </button>

          <span class="mdl-tooltip" data-bind="attr: {'data-mdl-for': 'edit-' + id() }">
            @Localizer["Edit"]
          </span>
        }

        @if (await AuthorizationService.AuthorizeAsync(User, "Delete Users"))
        {
          <button data-bind="attr: {id: 'delete-' + id() }, click: remove" class="mdl-button mdl-js-button mdl-button--icon">
            <i class="material-icons">delete</i>
          </button>

          <span class="mdl-tooltip" data-bind="attr: {'data-mdl-for': 'delete-' + id() }">
            @Localizer["Delete"]
          </span>
        }
      </li>
    </ul>
  </div>

  <div class="button-footer mdl-color--grey-100">
    @if (await AuthorizationService.AuthorizeAsync(User, "Create Users"))
    {
      @*<button class="mdl-button mdl-js-button mdl-button--fab mdl-button--colored"
                onclick="@("window.location.href='" + @Url.Action("Create", "User") + "'");">
          <i class="material-icons">add</i>
        </button>*@

      <button id="show-dialog" class="mdl-button mdl-js-button mdl-button--fab mdl-button--colored">
        <i class="material-icons">add</i>
      </button>

      <div class="mdl-tooltip" data-mdl-for="add">
        @Localizer["Add"]
      </div>
    }
  </div>
</div>

<script type="text/javascript">
  var users = [];
  var createUserRoles = [];
  var createUser;

  function addUser(item, index)
  {
    users.push(new User(item.id, item.email, item.name));
  }

  function User(id, email, name)
  {
    var self = this;
    self.id = ko.observable(id);
    self.name = ko.observable(name);
    self.email = ko.observable(email);

    self.redirect = function ()
    {
      window.location.href = "User/Edit/" + self.id();
    }

    self.remove = function ()
    {
      deleteUser(self.id());
    }
  }

  var dialog = document.querySelector('dialog');

  var showDialogButton = document.querySelector('#show-dialog');
  if (!dialog.showModal)
  {
    dialogPolyfill.registerDialog(dialog);
  }

  showDialogButton.addEventListener('click', function ()
  {
    var usersUrl = 'api/users/create';
    $.ajax(
      {
        url: usersUrl,
        type: 'GET',
        contentType: "application/json;charset=utf-8",
        success: function (data)
        {
          ko.applyBindings(new CreateUserViewModel(data), document.getElementById('createuserdialog'))
        },
        error: function (data)
        {
        }
      });

    // after invoking webapi and if success, return json and push it to users.
    // ko.contextFor(document.getElementById("userlist")).$data.add(data.id, data.email, data.name);

    dialog.showModal();
    dialog.style.width = "400px";
  });

  dialog.querySelector('.close').addEventListener('click', function ()
  {
    dialog.close();
  });

  function deleteUser(id)
  {
    var usersUrl = 'api/users';
    const url = `${usersUrl}/${id}`;

    $.ajax({
      url: url,
      type: 'DELETE',
      contentType: "application/json;charset=utf-8",
      success: function (data)
      {
        // removes from DOM.
        $("#itemList-" + id).remove();

        // show message.
        // create a proper json to send data.message.
        message(data)
      },
      error: function (data)
      {
        // show error, throw error?
        // read documentation about web api, throw error.
        // I think error: is about when the service is not available?
        message("Error while deleting user")
      }
    });
  }

  function CreateUserViewModel(data)
  {
    var self = this;

    self.name = ko.observable(data.name);
    self.email = ko.observable(data.email);
    self.username = ko.observable(data.userName);

    data.roles.forEach(createRoles)
    self.roles = ko.observableArray(createUserRoles);
  }

  function createRoles(item, index)
  {
    createUserRoles.push(new Role(item.id, item.name, item.check))
  }

  function Role(id, name, check)
  {
    var self = this;

    self.id = ko.observable(id)
    self.name = ko.observable(name)
    self.check = ko.observable(check)

    self.seleccionar = function (id)
    {
      // toggle?
      // apply styles? 
      self.check = !!self.check

    }
  }

  function message(message)
  {
    var notification = document.querySelector('#snackbar');
    notification.MaterialSnackbar.showSnackbar(
    {
      message: message
    });
  }
</script>