@using Microsoft.AspNetCore.Mvc.Localization
@using Microsoft.AspNetCore.Authorization
@inject IAuthorizationService AuthorizationService
@inject IViewLocalizer Localizer

@{
  ViewData["Title"] = Localizer["Users"];
}
<script type="text/javascript" src="~/lib/knockout/dist/knockout.js"></script>
<style>
  .mdl-snackbar
  {
    left: 170px;
    bottom: 10px;
  }

  .button-footer
  {
    position: fixed;
    right: 20px;
    bottom: 0;
    padding: 1rem;
    background-color: transparent;
    text-align: center;
  }

  .mdl-list__item
  {
    border-collapse: collapse;
    border-bottom: 1px solid rgba(0, 0, 0, 0.12);
    background-color: rgb(255,255,255);
    white-space: nowrap;
    height: 60px;
  }

    .mdl-list__item:first-child
    {
      border-top: 1px solid rgba(0, 0, 0, 0.12);
    }

    .mdl-list__item > button
    {
      display: none;
    }

    .mdl-list__item:hover > button
    {
      display: block;
    }

  .listcheckbox li
  {
    border: hidden !important;
  }
</style>

@section scripts
{
  <script>
    $(document).ready(function ()
    {
      const url = 'api/users';
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url);
      xhr.send();

      xhr.onreadystatechange = function ()
      {
        if (xhr.readyState == XMLHttpRequest.DONE && xhr.status == 200)
        {
          JSON.parse(xhr.response).forEach(addUser);
          ko.applyBindings(new ViewModel, document.getElementById('userlist'));
        }
      }

      function ViewModel()
      {
        var self = this;
        self.userResult = ko.observableArray(users);

        self.refresh = function ()
        {
          self.userResult(users);
        };

        self.add = function (id, mail, name)
        {
          self.userResult().push(new User(id, mail, name))
          self.refresh()
        }

        self.removeUser = function (id)
        {
          self.userResult.remove(function (user)
          {
            return user.id() == id;
          });
        }

        self.updateUserInfo = function (data)
        {
          // get user from self.userResult by its id.
          for (var i = 0, iLen = self.userResult().length; i < iLen; i++)
          {
            if (self.userResult()[i].id() == data.id)
            {
              self.userResult()[i].email(data.email)
              self.userResult()[i].name(data.name)
            }
          }
        }

        self.sortUsers = function ()
        {
          self.userResult.sort(function (user1, user2)
          {
            return user1.name().localeCompare(user2.name()) || user1.name().localeCompare(user2.name());
          });
        };
      };

      function EditUserViewModel()
      {
        var self = this;
        self.id = ko.observable(null);
        self.name = ko.observable(null);
        self.email = ko.observable(null);
        self.username = ko.observable(null);
        self.roles = ko.observableArray([]);

        self.reset = function ()
        {
          $('#editdivname').addClass('is-dirty');
          $('#editdivname').removeClass('is-invalid');

          $('#editdivemail').addClass('is-dirty');
          $('#editdivemail').removeClass('is-invalid');

          $('#editdivusername').addClass('is-dirty');
          $('#editdivusername').removeClass('is-invalid');

          self.name(null);
          self.email(null);
          self.username(null);
          self.id(null);
        };

        self.loadUser = function (data)
        {
          self.id(data.id);
          self.name(data.name);
          self.email(data.email);
          self.username(data.username);
          editUserRoles = [];
          data.roles.forEach(editRoles)
          self.roles(editUserRoles);
        }

        self.validate = function ()
        {
          var valid = false;
          if (self.name() == null || self.name() === '')
          {
            if (!$('#editdivname').hasClass('is-invalid'))
            {
              $('#editdivname').addClass('is-invalid');
            }
          }
          else
          {
            if ($('#editdivname').hasClass('is-invalid'))
            {
              $('#editdivname').removeClass('is-invalid');
            }

            valid = true;
          }

          if (self.username() == null || self.username() === '')
          {
            if (!$('#editdivusername').hasClass('is-invalid'))
            {
              $('#editdivusername').addClass('is-invalid');
            }

            valid = false;
          }
          else
          {
            if ($('#editdivusername').hasClass('is-invalid'))
            {
              $('#editdivusername').removeClass('is-invalid');
            }

            valid = true;
          }

          var emailValid = $('#editemail')[0].validity.valid;

          if (emailValid)
          {
            if ($('#divemail').hasClass('is-invalid'))
            {
              $('#divemail').removeClass('is-invalid');
            }

            valid = true;
          }
          else
          {
            if (!$('#divemail').hasClass('is-invalid'))
            {
              $('#divemail').addClass('is-invalid');
            }

            valid = false;
          }

          return valid;
        };
      }

      function CreateUserViewModel()
      {
        var self = this;
        self.name = ko.observable(null);
        self.email = ko.observable(null);
        self.username = ko.observable(null);
        self.roles = ko.observableArray([]);

        self.reset = function ()
        {
          $('#divname').removeClass('is-dirty');
          $('#divname').removeClass('is-invalid');

          $('#divemail').removeClass('is-dirty');
          $('#divemail').removeClass('is-invalid');

          $('#divusername').removeClass('is-dirty');
          $('#divusername').removeClass('is-invalid');

          self.name(null);
          self.email(null);
          self.username(null);
        };

        self.loadRoles = function (data)
        {
          createUserRoles = [];
          data.forEach(createRoles)
          self.roles(createUserRoles);
        }

        self.validate = function ()
        {
          var valid = false;
          if (self.name() == null || self.name() === '')
          {
            //if (!$('#divname').hasClass('is-dirty'))
            //{
            //  $('#divname').addClass('is-dirty');
            //}

            if (!$('#divname').hasClass('is-invalid'))
            {
              $('#divname').addClass('is-invalid');
            }
          }
          else
          {
            //if (!$('#divname').hasClass('is-dirty'))
            //{
            //  $('#divname').addClass('is-dirty');
            //}

            if ($('#divname').hasClass('is-invalid'))
            {
              $('#divname').removeClass('is-invalid');
            }

            valid = true;
          }

          if (self.username() == null || self.username() === '')
          {
            //if (!$('#divusername').hasClass('is-dirty'))
            //{
            //  $('#divusername').addClass('is-dirty');
            //}

            if (!$('#divusername').hasClass('is-invalid'))
            {
              $('#divusername').addClass('is-invalid');
            }

            valid = false;
          }
          else
          {
            //if (!$('#divusername').hasClass('is-dirty'))
            //{
            //  $('#divusername').addClass('is-dirty');
            //}

            if ($('#divusername').hasClass('is-invalid'))
            {
              $('#divusername').removeClass('is-invalid');
            }

            valid = true;
          }

          var emailValid = $('#email')[0].validity.valid;

          if (emailValid)
          {
            //if (!$('#divemail').hasClass('is-dirty'))
            //{
            //  $('#divemail').addClass('is-dirty');
            //}

            if ($('#divemail').hasClass('is-invalid'))
            {
              $('#divemail').removeClass('is-invalid');
            }

            valid = true;
          }
          else
          {
            //if (!$('#divemail').hasClass('is-dirty'))
            //{
            //  $('#divemail').addClass('is-dirty');
            //}

            if (!$('#divemail').hasClass('is-invalid'))
            {
              $('#divemail').addClass('is-invalid');
            }

            valid = false;
          }

          return valid;
        };
      }

      ko.applyBindings(new CreateUserViewModel(), document.getElementById('createuserdialog'))
      ko.applyBindings(new EditUserViewModel(), document.getElementById('edituserdialog'))
    });
  </script>
}
<div class="mdl-grid">
  <div class="mdl-cell mdl-cell--2-col"></div>
  <div id="snackbar" class="mdl-js-snackbar mdl-snackbar">
    <div class="mdl-snackbar__text"></div>
    <button class="mdl-snackbar__action" type="button"></button>
  </div>
  <div class="mdl-cell mdl-cell--9-col">
    <dialog class="mdl-dialog">
      <div id="createuserdialog" class="mdl-dialog__content listcheckbox">
        <div align="center">
          <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label" id="divname">
            <input data-bind='textInput:name' class="mdl-textfield__input" type="text" id="name" required />
            <label class="mdl-textfield__label" for="name">@Localizer["Name"]</label>
            <span id="errrlblname" class="mdl-textfield__error">@Localizer["Please enter the name"]</span>
          </div>
        </div>
        <div align="center">
          <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label" id="divusername">
            <input data-bind='textInput:username' class="mdl-textfield__input" type="text" id="username" required />
            <label class="mdl-textfield__label" for="username">@Localizer["Username"]</label>
            <span id="errrlblusername" class="mdl-textfield__error">@Localizer["Please enter the username"]</span>
          </div>
        </div>
        <div align="center">
          <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label" id="divemail">
            <label class="mdl-textfield__label" for="name">@Localizer["Email"]</label>
            <div>
              <input data-bind='textInput:email, valueUpdate: "afterkeydown"' class="mdl-textfield__input" type="email" id="email" required />
              <span id="errrlblemail" class="mdl-textfield__error">@Localizer["Invalid email format"]</span>
            </div>
          </div>
        </div>
        <ul class="mdl-list" data-bind="foreach: roles">
          <li class="mdl-list__item">
            <label data-bind="checkbox: check(), attr: {'for': id(), id: 'lbl'+ id() }" class="mdl-checkbox mdl-js-checkbox mdl-js-ripple-effect">
              <input class="mdl-checkbox__input" type="checkbox" data-bind='checked: check, attr: {id: id()}' />
              <span class="mdl-checkbox__label">
                <span class="mdl-list__item-secondary-action" data-bind='text:name()'></span>
              </span>
            </label>
          </li>
        </ul>
      </div>
      <div class="mdl-dialog__actions">
        <button type="button" onclick="Create()" class="mdl-button mdl-js-button mdl-button--raised mdl-button--colored mdl-button">@Localizer["Ok"]</button>
        <button type="button" class="mdl-button mdl-js-button close">@Localizer["Cancel"]</button>
      </div>
    </dialog>

    <dialog id="edituserdialog" class="mdl-dialog">
      <div class="mdl-dialog__content listcheckbox">
        <div align="center">
          <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label" id="editdivname">
            <input data-bind='textInput:name' class="mdl-textfield__input" type="text" id="editname" required />
            <label class="mdl-textfield__label" for="editname">@Localizer["Name"]</label>
            <span id="editerrrlblname" class="mdl-textfield__error">@Localizer["Please enter the name"]</span>
          </div>
        </div>
        <div align="center">
          <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label" id="editdivusername">
            <input data-bind='textInput:username' class="mdl-textfield__input" type="text" id="editusername" required />
            <label class="mdl-textfield__label" for="editusername">@Localizer["Username"]</label>
            <span id="editerrrlblusername" class="mdl-textfield__error">@Localizer["Please enter the username"]</span>
          </div>
        </div>
        <div align="center">
          <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label" id="editdivemail">
            <label class="mdl-textfield__label" for="editemail">@Localizer["Email"]</label>
            <div>
              <input data-bind='textInput:email, valueUpdate: "afterkeydown"' class="mdl-textfield__input" type="email" id="editemail" required />
              <span id="editerrrlblemail" class="mdl-textfield__error">@Localizer["Invalid email format"]</span>
            </div>
          </div>
        </div>
        <ul class="mdl-list" data-bind="foreach: roles">
          <li class="mdl-list__item">
            <label data-bind="checkbox: check(), attr: {'for': id(), id: 'lbl'+ id() }" class="mdl-checkbox mdl-js-checkbox mdl-js-ripple-effect">
              <input class="mdl-checkbox__input" type="checkbox" data-bind='checked: check, attr: {id: id()}' />
              <span class="mdl-checkbox__label">
                <span class="mdl-list__item-secondary-action" data-bind='text:name()'></span>
              </span>
            </label>
          </li>
        </ul>
      </div>
      <div class="mdl-dialog__actions">
        <button type="button" onclick="Edit()" class="mdl-button mdl-js-button mdl-button--raised mdl-button--colored mdl-button">@Localizer["Update"]</button>
        <button type="button" id="cancelEdit" class="mdl-button mdl-js-button closeEdit">@Localizer["Cancel"]</button>
      </div>
    </dialog>
    <h4>@Localizer["Users"]</h4>
    <ul id="userlist" class="mdl-list" data-bind="foreach: userResult">
      <li data-bind="attr: {id: 'itemList-' + id() }" class="mdl-list__item mdl-list__item--two-line js-deletable mdl-shadow--4dp ">
        <span class="mdl-list__item-primary-content">
          <i class="material-icons mdl-list__item-avatar">person</i>
          <span data-bind="text:name"></span>
          <span class="mdl-list__item-sub-title" data-bind="text:email"></span>
        </span>
        @if (await AuthorizationService.AuthorizeAsync(User, "Update Users"))
        {
          <button data-bind="attr: {id: 'edit-' + id() }, click: redirect" class="mdl-button mdl-js-button mdl-button--icon">
            <i class="material-icons">mode_edit</i>
          </button>
          <span class="mdl-tooltip" data-bind="attr: {'data-mdl-for': 'edit-' + id() }">
            @Localizer["Edit"]
          </span>
        }
        @if (await AuthorizationService.AuthorizeAsync(User, "Delete Users"))
        {
          <button data-bind="attr: {id: 'delete-' + id() }, click: remove" class="mdl-button mdl-js-button mdl-button--icon">
            <i class="material-icons">delete</i>
          </button>
          <span class="mdl-tooltip" data-bind="attr: {'data-mdl-for': 'delete-' + id() }">
            @Localizer["Delete"]
          </span>
        }
      </li>
    </ul>
  </div>

  <div class="button-footer">
    @if (await AuthorizationService.AuthorizeAsync(User, "Create Users"))
    {
      <button id="show-dialog" class="mdl-button mdl-js-button mdl-button--fab mdl-button--colored">
        <i class="material-icons">add</i>
      </button>
      <div class="mdl-tooltip" data-mdl-for="add">
        @Localizer["Add"]
      </div>
    }
  </div>
</div>

<script type="text/javascript">
  var users = [];
  var createUserRoles = [];
  var editUserRoles = [];
  var createUser;
  function addUser(item, index)
  {
    users.push(new User(item.id, item.email, item.name));
  }

  function EditUser(id)
  {
    // get user info by id.
    var usersUrl = 'api/users';
    const url = `${usersUrl}/${id}`;
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url);
    xhr.send();

    xhr.onreadystatechange = function ()
    {
      if (xhr.readyState == XMLHttpRequest.DONE && xhr.status == 200)
      {
        var jsonObject = JSON.parse(xhr.response);
        ko.contextFor(document.getElementById("edituserdialog")).$data.reset();
        ko.contextFor(document.getElementById("edituserdialog")).$data.loadUser(jsonObject)
        editdialog.style.width = "400px";
        editdialog.showModal();
      }

      if (xhr.readyState == XMLHttpRequest.DONE && xhr.status == 400)
      {
        message('Error');
        return;
      }
    }
  }

  function User(id, email, name)
  {
    var self = this;
    self.id = ko.observable(id);
    self.name = ko.observable(name);
    self.email = ko.observable(email);
    self.redirect = function ()
    {
      EditUser(self.id())
    }
    self.remove = function ()
    {
      deleteUser(self.id());
    }
  }

  // dialogs
  var editdialog = document.querySelector('#edituserdialog');
  if (!editdialog.showModal)
  {
    dialogPolyfill.registerDialog(editdialog);
  }

  editdialog.querySelector('#cancelEdit').addEventListener('click', function ()
  {
    editdialog.close();
  });

  var dialog = document.querySelector('dialog');
  var showDialogButton = document.querySelector('#show-dialog');
  if (!dialog.showModal)
  {
    dialogPolyfill.registerDialog(dialog);
  }

  showDialogButton.addEventListener('click', function ()
  {
    const url = 'api/users/create';
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url);
    xhr.send();

    xhr.onreadystatechange = function ()
    {
      if (xhr.readyState == XMLHttpRequest.DONE && xhr.status == 200)
      {
        ko.contextFor(document.getElementById("createuserdialog")).$data.reset();
        ko.contextFor(document.getElementById("createuserdialog")).$data.loadRoles(JSON.parse(xhr.response))
        dialog.style.width = "400px";
        dialog.showModal();
      }
    }
  });

  dialog.querySelector('.close').addEventListener('click', function ()
  {
    ko.contextFor(document.getElementById("createuserdialog")).$data.reset();
    dialog.close();
  });

  function deleteUser(id)
  {
    var usersUrl = 'api/users';
    const url = `${usersUrl}/${id}`;

    $.ajax({
      url: url,
      type: 'DELETE',
      contentType: "application/json;charset=utf-8",
      success: function (data)
      {
        ko.contextFor(document.getElementById("userlist")).$data.removeUser(id)
        message(data)
      },
      error: function (data)
      {
        message("Error")
      }
    });
  }

  function Edit()
  {
    // validate input.
    if (!ko.contextFor(document.getElementById("edituserdialog")).$data.validate())
    {
      return;
    }

    // create object and update.
    var obj = new Object();
    obj.id = ko.contextFor(document.getElementById("edituserdialog")).$data.id();
    obj.name = ko.contextFor(document.getElementById("edituserdialog")).$data.name();
    obj.username = ko.contextFor(document.getElementById("edituserdialog")).$data.username();
    obj.email = ko.contextFor(document.getElementById("edituserdialog")).$data.email();
    obj.roles = JSON.parse(ko.toJSON(editUserRoles));
    var model = JSON.stringify(obj);
    var usersUrl = 'api/users';
    const url = `${usersUrl}/${obj.id}`;
    var xhr = new XMLHttpRequest();
    xhr.open('PUT', url);
    xhr.setRequestHeader("Content-Type", "application/json; charset=utf-8");
    xhr.send(model);
    xhr.onreadystatechange = function ()
    {
      if (xhr.readyState == XMLHttpRequest.DONE && xhr.status == 204)
      {
        // update userlist (UserView())
        ko.contextFor(document.getElementById("userlist")).$data.updateUserInfo(obj);
        ko.contextFor(document.getElementById("userlist")).$data.sortUsers();
        message('@ViewBag.UpdatedUserMessage');
        editdialog.close();
      }

      if (xhr.readyState == XMLHttpRequest.DONE && xhr.status == 400)
      {
        var json = JSON.parse(xhr.response);
        message(json.message);
        return;
      }
    }
  }

  function Create()
  {
    if (!ko.contextFor(document.getElementById("createuserdialog")).$data.validate())
    {
      return;
    }

    var obj = new Object();
    obj.name = document.getElementById('name').value;
    obj.username = document.getElementById('username').value;
    obj.email = document.getElementById('email').value;
    obj.roles = JSON.parse(ko.toJSON(createUserRoles));
    var model = JSON.stringify(obj);
    const url = 'api/users/create';
    var xhr = new XMLHttpRequest();
    xhr.open('POST', url);
    xhr.setRequestHeader("Content-Type", "application/json; charset=utf-8")
    xhr.send(model);

    xhr.onreadystatechange = function ()
    {
      if (xhr.readyState == XMLHttpRequest.DONE && xhr.status == 201)
      {
        addUser(JSON.parse(xhr.response), 0);
        ko.contextFor(document.getElementById("userlist")).$data.refresh();
        ko.contextFor(document.getElementById("userlist")).$data.sortUsers();

        // change for localizer.
        message('@ViewBag.CreatedUserMessage');
        var dialog = document.querySelector('dialog');
        dialog.close();
      }

      if (xhr.readyState == XMLHttpRequest.DONE && xhr.status == 400)
      {
        var json = JSON.parse(xhr.response);
        if (json.attribute === "username")
        {
          message(json.message);
        }
        if (json.attribute === "email")
        {
          message(json.message);
        }
        return;
      }
    }
  }

  function editRoles(item, index)
  { editUserRoles.push(new Role(item)) }

  function createRoles(item, index)
  { createUserRoles.push(new Role(item)) }

  function Role(item)
  {
    var self = this;
    self.id = ko.observable(item.id)
    self.name = ko.observable(item.name)
    self.check = ko.observable(item.check || false)
  }

  function message(message)
  {
    var notification = document.querySelector('#snackbar');
    notification.MaterialSnackbar.showSnackbar(
    {
      message: message
    });
  }

  ko.bindingHandlers.checkbox =
    {
      init: function (element, valueAccessor, allBindings, viewModel, bindingContext)
      {
        var $el = $(element);
        var selected = valueAccessor();
        if (selected)
        {
          $el.addClass('is-checked')
        }
        else
        {
          $el.removeClass('is-checked')
        }

        componentHandler.upgradeAllRegistered();
      },
      update: function (element, valueAccessor, allBindings, viewModel, bindingContext)
      {
        var $el = $(element);
        var selected = valueAccessor();
        if (selected)
        {
          $el.addClass('is-checked')
        }
        else
        {
          $el.removeClass('is-checked')
        }
      }
    };
</script>